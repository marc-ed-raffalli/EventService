// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var Registry, channelA, nameA, nameB;

  Registry = require('../../src/registry/Registry.js');

  channelA = 'channelA';

  nameA = 'nameA';

  nameB = 'nameB';

  describe('Registry', function() {
    describe('Class definition', function() {
      return it('Registry API should be defined', function() {
        expect(Registry).not.to.be.undefined;
        expect(Registry.prototype.register).not.to.be.undefined;
        return expect(Registry.prototype.remove).not.to.be.undefined;
      });
    });
    return describe('API', function() {
      describe('Registry -> register()', function() {
        var registry;
        registry = void 0;
        beforeEach(function() {
          return registry = new Registry();
        });
        afterEach(function() {
          registry.emptyRegistryChannel();
          registry.emptyRegistryChannel(channelA);
          return registry = void 0;
        });
        it('should register item to the default channel', function() {
          var item, itemArr;
          item = registry.register({
            name: nameA
          });
          itemArr = registry.getRegistryChannel()[nameA];
          expect(itemArr.indexOf(item)).not.to.equal(-1);
          return expect(itemArr.length).to.equal(1);
        });
        return it('should register item to a custom channel', function() {
          var item, itemArr;
          item = registry.register({
            channel: channelA,
            name: nameA
          });
          itemArr = registry.getRegistryChannel(channelA)[nameA];
          expect(itemArr.indexOf(item)).not.to.equal(-1);
          return expect(itemArr.length).to.equal(1);
        });
      });
      return describe('Registry -> remove()', function() {
        var channelAEvtA, countEvtAOnDefaultChannel, countEvtAOnOtherChannel, countEvtBOnDefaultChannel, countEvtBOnOtherChannel, defaultChannel, defaultEvtA, otherChannel, registry;
        registry = void 0;
        defaultEvtA = void 0;
        channelAEvtA = void 0;
        defaultChannel = void 0;
        countEvtAOnDefaultChannel = void 0;
        countEvtBOnDefaultChannel = void 0;
        otherChannel = void 0;
        countEvtAOnOtherChannel = void 0;
        countEvtBOnOtherChannel = void 0;
        beforeEach(function() {
          var itemArgs;
          registry = new Registry();
          itemArgs = {
            name: nameA
          };
          defaultEvtA = registry.register(itemArgs);
          registry.register(itemArgs);
          registry.register(itemArgs);
          itemArgs.name = nameB;
          registry.register(itemArgs);
          registry.register(itemArgs);
          registry.register(itemArgs);
          itemArgs = {
            channel: channelA,
            name: nameA
          };
          channelAEvtA = registry.register(itemArgs);
          registry.register(itemArgs);
          registry.register(itemArgs);
          itemArgs.name = nameB;
          registry.register(itemArgs);
          registry.register(itemArgs);
          registry.register(itemArgs);
          defaultChannel = registry.getRegistryChannel();
          countEvtAOnDefaultChannel = defaultChannel[nameA].length;
          countEvtBOnDefaultChannel = defaultChannel[nameB].length;
          otherChannel = registry.getRegistryChannel(channelA);
          countEvtAOnOtherChannel = otherChannel[nameA].length;
          return countEvtBOnOtherChannel = otherChannel[nameB].length;
        });
        afterEach(function() {
          registry.emptyRegistryChannel();
          registry.emptyRegistryChannel(channelA);
          return registry = void 0;
        });
        it('should remove ONE item from the default channel when using item object', function() {
          var res;
          expect(countEvtAOnDefaultChannel).to.equal(3);
          res = registry.remove(defaultEvtA);
          expect(res).not.to.deep.equal([]);
          expect(defaultChannel[nameA].indexOf(defaultEvtA)).to.equal(-1);
          expect(defaultChannel[nameA].length).to.equal(countEvtAOnDefaultChannel - 1);
          expect(defaultChannel[nameB].length).to.equal(countEvtBOnDefaultChannel);
          expect(otherChannel[nameA].length).to.equal(countEvtAOnOtherChannel);
          return expect(otherChannel[nameB].length).to.equal(countEvtBOnOtherChannel);
        });
        it('should remove item from the custom channel using item object', function() {
          var res;
          expect(countEvtAOnOtherChannel).to.equal(3);
          res = registry.remove(channelAEvtA);
          expect(res).not.to.deep.equal([]);
          expect(otherChannel[nameA].indexOf(channelAEvtA)).to.equal(-1);
          expect(otherChannel[nameA].length).to.equal(countEvtAOnOtherChannel - 1);
          expect(otherChannel[nameB].length).to.equal(countEvtBOnOtherChannel);
          expect(defaultChannel[nameA].length).to.equal(countEvtAOnDefaultChannel);
          return expect(defaultChannel[nameB].length).to.equal(countEvtBOnDefaultChannel);
        });
        it('should remove all named item from the default channel using name selector', function() {
          var res;
          expect(countEvtAOnDefaultChannel).to.equal(3);
          res = registry.remove({
            name: nameA
          });
          expect(res).not.to.deep.equal([]);
          expect(defaultChannel[nameA].length).to.equal(0);
          expect(defaultChannel[nameB].length).to.equal(countEvtBOnDefaultChannel);
          expect(otherChannel[nameA].length).to.equal(countEvtAOnOtherChannel);
          return expect(otherChannel[nameB].length).to.equal(countEvtBOnOtherChannel);
        });
        return it('should remove all named item from the custom channel using name selector', function() {
          var res;
          expect(countEvtAOnOtherChannel).to.equal(3);
          res = registry.remove({
            channel: channelA,
            name: nameA
          });
          expect(res).not.to.deep.equal([]);
          expect(otherChannel[nameA].length).to.equal(0);
          expect(otherChannel[nameB].length).to.equal(countEvtBOnOtherChannel);
          expect(defaultChannel[nameA].length).to.equal(countEvtAOnDefaultChannel);
          return expect(defaultChannel[nameB].length).to.equal(countEvtBOnDefaultChannel);
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=Registry.js.map
