// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var RegistryItem, channelA, idA, nameA, nameB;

  RegistryItem = require('../../src/registry/RegistryItem.js');

  idA = 1;

  channelA = 'channelA';

  nameA = 'nameA';

  nameB = 'nameB';

  describe('RegistryItem', function() {
    describe('Class definition', function() {
      return it('RegistryItem API should be defined', function() {
        expect(RegistryItem).not.to.be.undefined;
        expect(RegistryItem.prototype["extends"]).not.to.be.undefined;
        return expect(RegistryItem.prototype.init).not.to.be.undefined;
      });
    });
    return describe('API', function() {
      describe('RegistryItem -> init()', function() {
        it('should accept id, name [,channel]', function() {
          var item;
          item = new RegistryItem({
            id: idA,
            name: nameA
          });
          expect(item.id).to.equal(idA);
          expect(item.name).to.equal(nameA);
          return expect(item.channel).to.equal(void 0);
        });
        return it('should THROW TypeError on missing id or name', function() {
          var missingIdFunc, missingIdNameFunc, missingNameFunc;
          missingIdFunc = function() {
            return new RegistryItem({
              name: nameA
            });
          };
          missingNameFunc = function() {
            return new RegistryItem({
              id: idA
            });
          };
          missingIdNameFunc = function() {
            return new RegistryItem;
          };
          expect(missingIdFunc).to["throw"];
          expect(missingNameFunc).to["throw"];
          return expect(missingIdNameFunc).to["throw"];
        });
      });
      return describe('RegistryItem -> extends()', function() {
        it('should return new Class with RegistryItem functions overridden/inherited', function() {
          var CST, Klass, _fcA, _init;
          CST = 123;
          _init = function() {};
          _fcA = function() {};
          Klass = RegistryItem.prototype["extends"]({
            CST: CST,
            init: _init,
            fcA: _fcA
          });
          expect(Klass).not.to.be.undefined;
          expect(Klass.prototype["extends"]).not.to.be.undefined;
          expect(Klass.prototype.init).not.to.be.undefined;
          expect(Klass.prototype.CST).to.equal(CST);
          expect(Klass.prototype.init).to.equal(_init);
          return expect(Klass.prototype.fcA).to.equal(_fcA);
        });
        return it('should new Class extending RegistryItem', function() {
          var Klass, k, _attr, _init;
          _attr = 1234;
          _init = function(options) {
            return Object.defineProperty(this, 'attr', {
              value: options.attr
            });
          };
          Klass = RegistryItem.prototype["extends"]({
            init: _init
          });
          k = new Klass({
            id: idA,
            name: nameA,
            attr: _attr
          });
          expect(k.id).to.equal(idA);
          expect(k.name).to.equal(nameA);
          expect(k.channel).to.equal(void 0);
          return expect(k.attr).to.equal(_attr);
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=RegistryItem.js.map
